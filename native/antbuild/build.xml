<project name="sdljoystick4java" default="dll" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <property environment="env"/>
    <property file="build.properties"/>

    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${ant-contrib.path}"/>

    <target name="init">
      <property name="platform" value="${env.Platform}"/>
      <fail message="Platform Error:${line.separator}* Invalid platform (only x86 and x64 supported).${line.separator}* Run the appropriate vcvars{32,64}.bat before invoking Ant.">
        <condition>
          <and>
            <not><equals arg1="${platform}" arg2="x86"/></not>
            <not><equals arg1="${platform}" arg2="x64"/></not>
          </and>
        </condition>
      </fail>
      <echo>Building for platform: ${platform}</echo>
      <condition property="is-x86">
        <equals arg1="${platform}" arg2="x86"/>
      </condition>
      <condition property="is-x64">
        <equals arg1="${platform}" arg2="x64"/>
      </condition>
      
      <property name="jdk-home.dir" location="${jdk-home.x86.dir}" if:set="is-x86"/>
      <property name="jdk-home.dir" location="${jdk-home.x64.dir}" if:set="is-x64"/>
      <echo>Using JDK_HOME: ${jdk-home.dir}</echo>
      
      <property name="sdl-include.dir" location="${sdl.dir}/include"/>
      <property name="sdl-lib.dir" location="${sdl.dir}/lib"/>
      
      <property name="build.dir" location="build/${platform}"/>
      <property name="out.dir" location="out/${platform}"/>
      
      <property name="libname" value="sdljoystick4java"/> <!-- Used for outfile files -->

      <property name="pch.file" location="${build.dir}/${libname}.pch" if:set="pch.source.file"/>

      <!-- Load up compiler and linker properties, expanding properties within. -->      
      <property file="toolchain-windows.properties"/>

      <property name="compiler.machine.args" value='${compiler.args.x86}' if:set="is-x86"/>
      <property name="compiler.machine.args" value='${compiler.args.x64}' if:set="is-x64"/>
      <property name="compiler.args.all" value="${compiler.args} ${compiler.machine.args}"/>

      <property name="linker.machine.args" value='${linker.args.x86}' if:set="is-x86"/>
      <property name="linker.machine.args" value='${linker.args.x64}' if:set="is-x64"/>
      <property name="linker.args.all" value="${linker.args} ${linker.machine.args}"/>
      
      <filelist id="source.files" dir="${src.dir}" files="${src.files}"/>
      <filelist id="pch-source.filelist" dir="${src.dir}" files="${pch.source.file}" if:set="pch.source.file"/>
      
      <property name="force.rebuild" value="false"/>
                
      <mkdir dir="${build.dir}"/>
      <mkdir dir="${out.dir}"/>
    </target>
    
    <target name="gen-pch" depends="init" description="Generate PCH" if="pch.source.file">
      <apply executable="${cc}" dest="${build.dir}" skipemptyfilesets="true" verbose="true" force="${force.rebuild}">
        <filelist refid="pch-source.filelist"/>
        <mapper type="merge" to="${pch.file}"/>
        <arg line="${compiler.args.all}"/>
        <arg line="${compiler.gen-pch.args}"/>
        <srcfile/>
      </apply>
    </target>
    
    <target name="compile" depends="gen-pch" description="Compile sources">
      <apply executable="${cc}" dest="${build.dir}" skipemptyfilesets="true" force="${force.rebuild}"
             parallel="true" verbose="true" >
        <filelist refid="source.files"/>
        <mapper type="glob" from="*.cpp" to="*.obj"/>
        <arg line="${compiler.args.all}"/>
        <arg line="${compiler.use-pch.args}" if:set="pch.source.file"/>
        <srcfile/>
      </apply>
    </target>

    <target name="dll" depends="compile" description="Build DLL">
      <apply executable="${link}" dest="${out.dir}" skipemptyfilesets="true" verbose="true"
             parallel="true" force="${force.rebuild}">
        <fileset dir="${build.dir}">
          <include name="*.obj"/>
        </fileset>
        <mapper type="merge" to="${libname}.dll"/>
        <arg line="${linker.args.all}"/>
        <srcfile/>
      </apply>
    </target>

    <target name="clean" depends="init" description="Clean output directories">
      <delete dir="${build.dir}"/>
      <delete dir="${out.dir}"/>
    </target>

</project>

<!-- :wrap=none:maxLineLen=110: -->
